<?php
include (__DIR__ . '/../config.php');
include (__DIR__ . '/../functions.php');

$clientId = $_SESSION['client_id'];
$array = getBrokerUserByClientId($db, $clientId);
$accountId = $array['user'];
$positiveMultiplier = $array['positive_multiplier'];
$negativeMultiplier = $array['negative_multiplier'];

// Datenbankverbindung und Funktion getSqlForHoursByAccount() hier

// Überprüfe, ob es sich um eine AJAX-Anfrage handelt
if (isset ($_POST['timeFrame']) && isset ($_POST['accountId'])) {
    $timeFrame = $_POST['timeFrame'];
    $accountId = $_POST['accountId'];
    $sql = '';

    // Entscheide, welche Funktion basierend auf dem gewählten Zeitrahmen aufgerufen werden soll
    switch ($timeFrame) {
        case 'hours':
            $sql = getSqlForHoursByAccount($accountId, $positiveMultiplier, $negativeMultiplier);
            break;
        case 'days':
            $sql = getSqlForDaysByAccount($accountId, $positiveMultiplier, $negativeMultiplier);
            break;
        case 'weeks':
            $sql = getSqlForWeeksByAccount($accountId, $positiveMultiplier, $negativeMultiplier);
            break;
        case 'months':
            $sql = getSqlForMonthsByAccount($accountId, $positiveMultiplier, $negativeMultiplier);
            break;
    }


    $result = $connection->query($sql);
    $chartData = [];

    while ($row = $result->fetch_assoc()) {
        $chartData[] = $row;
    }

    // Schließe die Datenbankverbindung
    $connection->close();

    // Sende die Daten zurück zum Client
    echo json_encode($chartData);
    exit;
}



function getSqlForHoursByAccount($accountId, $positiveMultiplier, $negativeMultiplier)
{
    return "SELECT hour AS label, 
                CASE
                    WHEN SUM(hourly_profit) > 0 THEN SUM(hourly_profit) * $positiveMultiplier
                    ELSE SUM(hourly_profit) * $negativeMultiplier
                END AS profit
            FROM (
                SELECT HOUR(FROM_UNIXTIME(o.time)) AS hour, o.profit AS hourly_profit
                FROM orders AS o
                WHERE o.account = $accountId AND o.time >= UNIX_TIMESTAMP(CURDATE() - INTERVAL 1 DAY)
                UNION ALL
                SELECT a.a AS hour, 0 AS hourly_profit
                FROM (
                    SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL 
                    SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL 
                    SELECT 10 UNION ALL SELECT 11
                ) AS a
            ) AS combined
            GROUP BY hour
            ORDER BY hour ASC";
}

function getSqlForDaysByAccount($accountId, $positiveMultiplier, $negativeMultiplier)
{
    return "SELECT day AS label, 
                CASE
                    WHEN SUM(daily_profit) > 0 THEN SUM(daily_profit) * $positiveMultiplier
                    ELSE SUM(daily_profit) * $negativeMultiplier
                END AS profit
            FROM (
                SELECT DATE(FROM_UNIXTIME(o.time)) AS day, o.profit AS daily_profit
                FROM orders AS o
                WHERE o.account = $accountId AND o.time >= UNIX_TIMESTAMP(CURDATE() - INTERVAL 7 DAY)
                UNION ALL
                SELECT DATE(DATE_SUB(NOW(), INTERVAL a.a DAY)) AS day, 0 AS daily_profit
                FROM (
                    SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL 
                    SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6
                ) AS a
            ) AS combined
            GROUP BY day
            ORDER BY day ASC";
}

function getSqlForWeeksByAccount($accountId, $positiveMultiplier, $negativeMultiplier)
{
    return "SELECT CONCAT('KW ', WEEK(day), '/', YEAR(day)) AS label, 
                CASE
                    WHEN SUM(profit) > 0 THEN SUM(profit) * $positiveMultiplier
                    ELSE SUM(profit) * $negativeMultiplier
                END AS profit
            FROM (
                SELECT DATE(FROM_UNIXTIME(o.time)) AS day, o.profit
                FROM orders AS o
                WHERE o.account = $accountId AND o.time >= UNIX_TIMESTAMP(CURDATE() - INTERVAL 4 WEEK)
            ) AS weekly_data
            GROUP BY WEEK(day), YEAR(day)
            ORDER BY MIN(day) ASC";
}

function getSqlForMonthsByAccount($accountId, $positiveMultiplier, $negativeMultiplier)
{
    return "SELECT CONCAT(MONTHNAME(day), ' ', YEAR(day)) AS label, 
                CASE
                    WHEN SUM(profit) > 0 THEN SUM(profit) * $positiveMultiplier
                    ELSE SUM(profit) * $negativeMultiplier
                END AS profit
            FROM (
                SELECT DATE(FROM_UNIXTIME(o.time)) AS day, o.profit
                FROM orders AS o
                WHERE o.account = $accountId AND o.time >= UNIX_TIMESTAMP(CURDATE() - INTERVAL 6 MONTH)
            ) AS monthly_data
            GROUP BY MONTH(day), YEAR(day)
            ORDER BY MIN(day) ASC";
}
