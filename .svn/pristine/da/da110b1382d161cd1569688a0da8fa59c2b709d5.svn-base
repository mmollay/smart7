<?php
//http://deineDomain.de/.../fetch_orders.php?token=52a36a36e2e6da849685b71f466dde56
//http://localhost/smart7/ssi_trader/exec/fetch_orders.php?token=52a36a36e2e6da849685b71f466dde56

// für cronjob  
//* * * * * php /var/www/ssi/smart7/ssi_trader/exec/fetch_mt5.php 52a36a36e2e6da849685b71f466dde56
//$apiUrl = 'orders.txt';

session_start();
error_reporting(E_ALL);
ini_set('display_errors', 1);

define('SECRET_TOKEN', '52a36a36e2e6da849685b71f466dde56');

function validateToken($token)
{
    return $token === SECRET_TOKEN;
}

if (php_sapi_name() === 'cli') {
    $token = $argc > 1 ? $argv[1] : null;
} else {
    $token = isset($_GET['token']) ? $_GET['token'] : null;
}

$response = [
    'success' => true,
    'data' => [],
    'errors' => [],
];

if (!validateToken($token)) {
    $response['success'] = false;
    $response['errors'][] = [
        'message' => "Unauthorized access! Incorrect or missing token.",
        'type' => 'error'
    ];
    header('Content-Type: application/json');
    echo json_encode($response);
    exit;
}

require(__DIR__ . "/../functions.php");
require(__DIR__ . "/../config_db.php");

$conn = new mysqli($cfg_mysql['server'], $cfg_mysql['user'], $cfg_mysql['password'], $cfg_mysql['db']);
if ($conn->connect_error) {
    $response['success'] = false;
    $response['errors'][] = [
        'message' => "Connection failed: " . $conn->connect_error,
        'type' => 'error'
    ];
    header('Content-Type: application/json');
    echo json_encode($response);
    exit;
}

$serverQuery = "SELECT s.url, s.server_id, b.broker_id FROM ssi_trader.server s LEFT JOIN ssi_trader.broker b ON s.server_id = b.server_id";
$result = $conn->query($serverQuery);

if ($result && $result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $apiUrl = $row['url'];
        //$apiUrl = 'orders.txt'; // Testzwecke
        $server_id = $row['server_id'];
        $broker_id = $row['broker_id'];

        // Überprüfung, ob server_id und broker_id gesetzt sind
        if (empty($server_id) || empty($broker_id)) {
            $response['errors'][] = [
                'message' => "Fehler: server_id oder broker_id fehlt für die URL {$apiUrl}.",
                'type' => 'error'
            ];
            continue; // Überspringt den aktuellen Durchlauf
        }

        $apiResponse = file_get_contents($apiUrl);
        $orders = json_decode($apiResponse, true);

        // Zähler initialisieren
        $insertedCount = 0;
        $alreadyInsertedCount = 0;

        if (!empty($orders)) {
            foreach ($orders as $order) {
                // Check if the symbol already exists and retrieve the symbol_id
                $symbolQuery = $conn->prepare("SELECT symbol_id FROM ssi_trader.symbols WHERE symbol = ?");
                $symbolQuery->bind_param("s", $order[15]); // Annahme: Das Symbol befindet sich an der 16. Position im Array
                $symbolQuery->execute();
                $resultSymbol = $symbolQuery->get_result();

                if ($resultSymbol->num_rows > 0) {
                    $rowSymbol = $resultSymbol->fetch_assoc();
                    $symbol_id = $rowSymbol['symbol_id'];
                } else {
                    $insertSymbol = $conn->prepare("INSERT INTO ssi_trader.symbols (symbol) VALUES (?)");
                    $insertSymbol->bind_param("s", $order[15]);
                    $insertSymbol->execute();
                    $symbol_id = $conn->insert_id;
                }

                $stmt = $conn->prepare("INSERT INTO ssi_trader.orders (ticket, order_id, time, time_msc, type, entry, magic, position_id, reason, volume, price, commission, swap, profit, fee, symbol_id, comment, external_id, server_id, broker_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE ticket = VALUES(ticket)");
                $stmt->bind_param("iiiiiiiiiddddddissii", $order[0], $order[1], $order[2], $order[3], $order[4], $order[5], $order[6], $order[7], $order[8], $order[9], $order[10], $order[11], $order[12], $order[13], $order[14], $symbol_id, $order[16], $order[17], $server_id, $broker_id);

                try {
                    $stmt->execute();

                    $affectedRows = $stmt->affected_rows;

                    if ($affectedRows == 1) {
                        $insertedCount++;
                    } elseif ($affectedRows == 0) {
                        $alreadyInsertedCount++;
                    }
                } catch (mysqli_sql_exception $e) {
                    $response['errors'][] = [
                        'message' => "An error occurred while inserting order with ticket {$order[0]}: " . $e->getMessage(),
                        'type' => 'error'
                    ];
                }
            }

            if ($insertedCount == 0 && $alreadyInsertedCount > 0) {
                $response['data'][] = [
                    'message' => "No new orders inserted. $alreadyInsertedCount duplicate orders were skipped.",
                    'type' => 'info'
                ];
            }

            if ($insertedCount > 0) {
                $response['data'][] = [
                    'message' => "$insertedCount new orders successfully inserted.",
                    'type' => 'success'
                ];
            }

            // if ($alreadyInsertedCount > 0) {
            //     $response['data'][] = [
            //         'message' => "$alreadyInsertedCount orders were already inserted.",
            //         'type' => 'info'
            //     ];
            // }
        } else {
            $response['data'][] = [
                'message' => "No data received from API $apiUrl.",
                'type' => 'info'
            ];
        }
    }
} else {
    $response['success'] = false;
    $response['errors'][] = [
        'message' => "No server URLs found.",
        'type' => 'error'
    ];
}

header('Content-Type: application/json');
echo json_encode($response);
$conn->close();
