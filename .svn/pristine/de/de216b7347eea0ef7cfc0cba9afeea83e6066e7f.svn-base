<?php
// Beispiel für die Verwendung der Funktion
$connection = new mysqli($cfg_mysql['server'], $cfg_mysql['user'], $cfg_mysql['password'], $cfg_mysql['db']);

// Rufe die Funktion auf, um das Array für die Jahre zu erhalten
// $yearsDropdownArray = getUniqueYearsForDropdown($connection);

// $array_filter_month = array(
//     'MONTH(FROM_UNIXTIME(time)) = 1' => 'Jänner',
//     'MONTH(FROM_UNIXTIME(time)) = 2' => 'Februar',
//     'MONTH(FROM_UNIXTIME(time)) = 3' => 'März',
//     'MONTH(FROM_UNIXTIME(time)) = 4' => 'April',
//     'MONTH(FROM_UNIXTIME(time)) = 5' => 'Mai',
//     'MONTH(FROM_UNIXTIME(time)) = 6' => 'Juni',
//     'MONTH(FROM_UNIXTIME(time)) = 7' => 'Juli',
//     'MONTH(FROM_UNIXTIME(time)) = 8' => 'August', // Korrektur der Schreibweise
//     'MONTH(FROM_UNIXTIME(time)) = 9' => 'September',
//     'MONTH(FROM_UNIXTIME(time)) = 10' => 'Oktober',
//     'MONTH(FROM_UNIXTIME(time)) = 11' => 'November',
//     'MONTH(FROM_UNIXTIME(time)) = 12' => 'Dezember'
// );

// Initialize the array with the "Current Year" filter
$array_filter_time_periods = [
    'YEAR(FROM_UNIXTIME(time)) = ' . date('Y') => 'Current Year',
];
// Existing filters for specific time periods
$array_filter_time_periods += [
    'DATE(FROM_UNIXTIME(time)) = CURDATE()' => 'Today',
    'DATE(FROM_UNIXTIME(time)) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)' => 'Yesterday',
    'DATE(FROM_UNIXTIME(time)) = DATE_SUB(CURDATE(), INTERVAL 2 DAY)' => 'Day Before Yesterday',
    'YEARWEEK(FROM_UNIXTIME(time), 1) = YEARWEEK(CURDATE(), 1) - 1' => 'Last Week',
    'MONTH(FROM_UNIXTIME(time)) = MONTH(CURDATE()) - 1 AND YEAR(FROM_UNIXTIME(time)) = YEAR(CURDATE())' => 'Last Month',
];

// Add filters for the last six months, including the year
for ($i = 1; $i <= 6; $i++) {
    $monthYear = date('F Y', strtotime("-$i month"));
    $month = date('m', strtotime("-$i month"));
    $year = date('Y', strtotime("-$i month"));

    // Generate the SQL condition
    $condition = "MONTH(FROM_UNIXTIME(time)) = $month AND YEAR(FROM_UNIXTIME(time)) = $year";

    // Add month and year to the display text
    $array_filter_time_periods[$condition] = $monthYear;
}

$arr['mysql'] = [
    'table' => 'ssi_trader.orders AS o LEFT JOIN ssi_trader.symbols AS s ON o.symbol_id = s.symbol_id', // Alias 'o' für die Tabelle orders
    'field' => "o.ticket, o.order_id, o.time, o.time_msc, o.type type,  o.magic, o.position_id, o.reason, lotgroup_id,        
                CASE 
                    WHEN COUNT(*) = 2 THEN o.volume
                    ELSE SUM(o.volume)
                END AS volume,
                MAX(o.entry) entry,
                CEIL(COUNT(*) / 2) AS level,
                MIN(o.price) AS min_price, 
                MAX(o.price) AS max_price, 
                o.commission, o.swap, SUM(o.profit) profit, o.fee, o.symbol_id, 
                MIN(FROM_UNIXTIME(o.time)) AS entry_time, 
                MAX(FROM_UNIXTIME(o.time)) AS exit_time, 
                FROM_UNIXTIME(o.time) AS readable_time, 
                s.symbol", // Hinzufügen von s.symbol_name zur Feldliste
    'order' => 'o.time DESC', // Sortierung nach 'time' in orders
    'like' => 'lotgroup_id,position_id',
    'limit' => 100,
    // 'group' => 'o.lotgroup_id', // Gruppierung nach 'ticket' in orders
    //'group' => 'o.position_id', // Gruppierung nach 'ticket' in orders
    'group' => 'o.order_id', // Gruppierung nach 'order_id' in orders

    //'where' => "AND o.entry > 0" // Hinzufügen einer Bedingung für 'entry' in orders
];

$array_filter_server = getServerFilterArray($connection);

//$arr['filter']['select_year'] = array('type' => 'dropdown', 'array' => $yearsDropdownArray, 'placeholder' => 'Alle Jahre', 'query' => "{value}");
//$arr['filter']['select_month'] = array('type' => 'dropdown', 'query' => "{value}", 'array' => $array_filter_month, 'placeholder' => '--Alle Monate--');
$arr['filter']['select_day'] = array('type' => 'dropdown', 'query' => "{value}", 'array' => $array_filter_time_periods, 'placeholder' => '--Timer period--', 'default_value' => 'DATE(FROM_UNIXTIME(time)) = CURDATE()');
$arr['filter']['server_id'] = array('type' => 'text', 'placeholder' => 'Server', 'array' => $array_filter_server);

$arr['order'] = array('default' => 'order_id desc', 'array' => array('order_id desc' => 'Order ID', 'position_id desc, order_id desc' => 'Position', 'lotgroup_id desc, position_id desc, order_id desc' => 'Lot Group desc', 'time desc' => 'Time desc', 'profit desc' => 'Profit desc'));
//group
$arr['group'] = array('default' => 'order_id', 'array' => array('order_id' => 'Group by ID', 'position_id' => 'Position', 'lotgroup_id' => 'Lot Group', 'time' => 'Time', 'profit' => 'Profit'));

$arr['list'] = [
    'id' => 'orders',
    'width' => '1100px',
    'size' => 'small',
    'class' => 'compact celled striped'
];

// Hinzufügen von Spaltenüberschriften basierend auf der Tabelle `orders`
$arr['th']['order_id'] = ['title' => "Order ID", 'width' => '100px'];
//$arr['th']['position_id'] = ['title' => "Position ID", 'width' => '100px'];
//$arr['th']['lotgroup_id'] = ['title' => "Lotgroup ID", 'width' => '100px'];
$arr['th']['symbol'] = ['title' => "Symbol ID", 'width' => '100px'];
$arr['th']['min_price'] = ['title' => "Min Price", 'format' => 'number_color', 'width' => '120px'];
$arr['th']['max_price'] = ['title' => "Max Price", 'format' => 'number_color', 'width' => '120px'];
$arr['th']['type'] = ['title' => "Type", 'replace' => array('default' => '', '1' => "<span class='ui blue text'>buy</span>", '0' => "<span class='ui red text'>sell</span>"), 'align' => 'center', 'width' => '50px'];
$arr['th']['entry'] = ['title' => "Entry", 'format' => 'number', 'align' => 'right', 'width' => '50px'];
$arr['th']['volume'] = ['title' => "Volume"];
$arr['th']['level'] = ['title' => "Level"];
$arr['th']['entry_time'] = ['title' => "Entry Time"];
$arr['th']['exit_time'] = ['title' => "Exit Time"];
$arr['th']['profit'] = ['title' => "Profit", 'format' => 'number_redblue', 'align' => 'right', 'total' => true, 'width' => '120px'];
// $arr['th']['readable_time_msc'] = ['title' => "Readable Time (msc)", 'align' => 'center'];
// $arr['th']['time'] = ['title' => "Time", 'align' => 'center'];
// $arr['th']['time_msc'] = ['title' => "Time (msc)", 'align' => 'center'];
// $arr['th']['magic'] = ['title' => "Magic"];
// $arr['th']['reason'] = ['title' => "Reason"];
// $arr['th']['commission'] = ['title' => "Commission"];
//$arr['th']['swap'] = ['title' => "Swap"];
//$arr['th']['ticket'] = ['title' => "Ticket"];
// $arr['th']['fee'] = ['title' => "Fee"];


function getUniqueYearsForDropdown($connection)
{
    $yearsArray = [];

    // SQL-Abfrage vorbereiten
    $query = "SELECT DISTINCT YEAR(FROM_UNIXTIME(time)) AS year FROM orders ORDER BY year DESC";

    // Führe die Abfrage aus
    $result = $connection->query($query);

    // Überprüfe, ob die Abfrage erfolgreich war
    if ($result) {
        // Hole alle einzigartigen Jahre und fülle das Array
        while ($row = $result->fetch_assoc()) {
            // Der Schlüssel und Wert sind hier gleich, da keine spezifische Bedingung benötigt wird
            $yearsArray["YEAR(FROM_UNIXTIME(time)) = " . $row['year']] = $row['year'];
        }

        // Gib das Ergebnis frei
        $result->free();
    } else {
        // Fehlerbehandlung
        echo "Fehler bei der Abfrage: " . $connection->error;
    }

    return $yearsArray;
}

function getWeeksArray()
{
    $weeksArray = [];
    $currentTimestamp = time(); // Aktueller Zeitpunkt

    for ($i = 0; $i <= 5; $i++) {
        // Berechne den Start- und Endzeitpunkt jeder Woche
        $startOfWeek = strtotime("Monday this week - $i week");
        $endOfWeek = strtotime("Sunday this week - $i week");

        // Formatierung für die Anzeige
        $display = date('Y-m-d', $startOfWeek) . " bis " . date('Y-m-d', $endOfWeek);

        // Formatierung für die SQL-Abfrage
        $condition = "time >= " . $startOfWeek . " AND time <= " . $endOfWeek;

        // Füge den Eintrag zum Array hinzu
        $weeksArray[$condition] = $display;
    }

    return $weeksArray;
}

function getWeeksFilterArray()
{
    $weeksArray = [];
    $currentWeekNumber = date('W');
    $currentYear = date('Y');

    for ($i = 0; $i <= 6; $i++) {
        // Berechne die Woche und das Jahr, falls die Woche ins vorherige Jahr fällt
        $weekNumber = $currentWeekNumber - $i;
        $year = $currentYear;
        if ($weekNumber <= 0) {
            $weekNumber += 52;
            $year -= 1;
        }

        // Erstelle die SQL-Bedingung
        $condition = sprintf("YEAR(FROM_UNIXTIME(time)) = %d AND WEEK(FROM_UNIXTIME(time), 1) = %d", $year, $weekNumber);

        // Berechne den lesbaren Zeitraum für die Anzeige
        $startOfWeek = strtotime($year . "W" . str_pad($weekNumber, 2, '0', STR_PAD_LEFT));
        $endOfWeek = strtotime("+6 days", $startOfWeek);
        $display = "Woche vom " . date('Y-m-d', $startOfWeek) . " bis " . date('Y-m-d', $endOfWeek);

        // Füge den Eintrag zum Array hinzu
        $weeksArray[$condition] = $display;
    }

    return $weeksArray;
}

function getServerFilterArray($connection)
{
    $serverArray = [];

    // SQL-Abfrage vorbereiten
    $query = "SELECT server_id, name FROM servers ORDER BY name";

    // Führe die Abfrage aus
    $result = $connection->query($query);

    // Überprüfe, ob die Abfrage erfolgreich war
    if ($result) {
        // Hole alle Server und fülle das Array
        while ($row = $result->fetch_assoc()) {
            $serverArray[$row['server_id']] = $row['name'];
        }

        // Gib das Ergebnis frei
        $result->free();
    } else {
        // Fehlerbehandlung
        echo "Fehler bei der Abfrage: " . $connection->error;
    }

    return $serverArray;
}