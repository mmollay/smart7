<?php

// Funktion zum Abrufen der Strategienamen
// ema_form.php und f_server.php
function getStrategyNames($url, $token)
{
    // sendCurlRequest-Funktion muss bereits definiert sein oder Sie müssen hier eine cURL-Anfrage einbauen
    $json_string = sendCurlRequest($url . "/getStrategies", '', $token);

    // Konvertieren des JSON-Strings in ein PHP-Array
    $data = json_decode($json_string, true);

    $arrayStrategies = [];

    // Überprüfen, ob die 'strategies'-Daten vorhanden und korrekt sind
    if (isset($data['strategies']) && is_array($data['strategies'])) {
        // Durchlaufen des 'strategies' Arrays und Erstellen eines neuen assoziativen Arrays,
        // in dem der 'strategyName' sowohl der Schlüssel als auch der Wert ist
        foreach ($data['strategies'] as $strategy) {
            $name = $strategy['strategyName'];
            $arrayStrategies[$name] = $name;
        }
    }

    // Rückgabe des assoziativen Arrays, in dem 'strategyName' Schlüssel und Wert ist
    return $arrayStrategies;
}

function getToken($serverIp, $username, $password)
{
    $loginUrl = $serverIp . "/login";
    $loginData = array('username' => $username, 'password' => $password);

    $jsonStringLogin = sendCurlRequest($loginUrl, $loginData, 'POST');
    $obj = json_decode($jsonStringLogin);

    if ($obj !== null && property_exists($obj, 'token')) {
        return $obj->token;
    } else {
        return null; // oder throw new Exception("Token konnte nicht abgerufen werden.");
    }
}

function getMT5BrokerData($mysqli, $server_id)
{
    // Überprüft, ob die Funktion mit einem gültigen server_id aufgerufen wurde
    if (empty($server_id)) {
        return "Invalid server ID specified.";
    }

    // SQL-Anfrage, um Broker-Daten in Verbindung mit der Server-ID auszulesen
    $sql = "SELECT servers.*, broker.user, broker.password, broker.broker_server 
            FROM ssi_trader.servers 
            LEFT JOIN ssi_trader.broker ON servers.broker_id = broker.broker_id 
            WHERE servers.server_id = ?";

    // Prepared Statement, um SQL-Injection zu vermeiden
    if ($stmt = $mysqli->prepare($sql)) {
        // Bindet die Parameter an die SQL-Anfrage
        $stmt->bind_param("i", $server_id);

        // Führt die Anfrage aus
        $stmt->execute();

        // Holt das Ergebnis der Anfrage
        $result = $stmt->get_result();

        if ($row = $result->fetch_assoc()) {
            // Extrahiert die benötigten Daten aus der Antwort
            $data = [
                'account' => $row['user'],
                'password' => $row['password'],
                'server' => $row['broker_server']
            ];

            // Gibt die gesammelten Daten zurück
            return $data;
        } else {
            // Keine Daten gefunden
            return "No data found for server_id: " . $server_id;
        }
    } else {
        // Fehler beim Vorbereiten der SQL-Anfrage
        return "Error preparing SQL query.";
    }
}


//controlMT5($mysqli, $server_id, $token, 'start');
//controlMT5($mysqli, $server_id, $token, 'stop');
function controlMT5($mysqli, $server_id, $token, $action)
{
    if (!in_array($action, ['start', 'stop'])) {
        return "Invalid action specified.";
    }

    // SQL-Anfrage, um Broker-Daten in Verbindung mit der Server-ID auszulesen
    $sql = "SELECT servers.*, broker.user, broker.password, broker.broker_server FROM ssi_trader.servers LEFT JOIN ssi_trader.broker ON servers.broker_id = broker.broker_id WHERE servers.server_id = ?";

    // Prepared Statement, um SQL-Injection zu vermeiden
    if ($stmt = $mysqli->prepare($sql)) {
        // Bindet die Parameter an die SQL-Anfrage
        $stmt->bind_param("i", $server_id);

        // Führt die Anfrage aus
        $stmt->execute();

        // Holt das Ergebnis der Anfrage
        $result = $stmt->get_result();

        if ($row = $result->fetch_assoc()) {
            // Extrahiert die benötigten Daten aus der Antwort
            $user = $row['user'];
            $password = $row['password'];
            $broker_server = $row['broker_server'];
            $serverIp = $row['url'];

            // URL für die Anfrage, abhängig von der Aktion
            $url = $serverIp . "/" . $action . "MT5";

            // Daten für die Anfrage
            $data = array('account' => $user, 'password' => $password, 'server' => $broker_server);

            // Sendet die Anfrage
            $jsonString = sendCurlRequest($url, $data, $token);

            // Gibt die Antwort zurück
            return $jsonString;
        } else {
            // Keine Daten gefunden
            return "No data found for server_id: " . $server_id;
        }
    } else {
        // Fehler beim Vorbereiten der SQL-Anfrage
        return "Error preparing SQL query.";
    }
}



//Get all server ips
function getAllServerIps($mysqli)
{
    $ips = [];
    // Erweiterte Abfrage mit JOIN auf die Broker-Tabelle
    $query = "SELECT s.server_id, s.url, s.name, b.broker_id, b.real_account 
              FROM ssi_trader.servers AS s
              JOIN ssi_trader.broker AS b ON s.broker_id = b.broker_id 
              WHERE s.active = 1";

    if ($result = $mysqli->query($query)) {
        while ($row = $result->fetch_assoc()) {
            $ips[] = [
                'url' => $row['url'],
                'name' => $row['name'],
                'server_id' => $row['server_id'],
                'broker_id' => $row['broker_id'], // Broker-ID hinzugefügt
                'real_account' => $row['real_account'] // Status des realen Kontos hinzugefügt
            ];
        }
        $result->free();
    }
    return $ips;
}


// Funktion für cURL-Requests
function sendCurlRequest($url, $data = '', $token = '')
{
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $headers = ['Content-Type: application/json'];
    if (!empty($token)) {
        $headers[] = 'Authorization: ' . $token; // Token zum Header hinzufügen
    }

    if (!empty($data)) {
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    }

    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 2);
    curl_setopt($ch, CURLOPT_TIMEOUT, 5);

    $response = curl_exec($ch);

    if (curl_errno($ch)) {
        $error_msg = curl_error($ch);
        $response = "connection_failed: $url, Error: $error_msg";
    }

    curl_close($ch);
    return $response;
}


function getServerIdGetUrl($mysqli, $server_id)
{

    // Überprüfen, ob die übergebene server_id gültig ist
    if (!is_numeric($server_id) || $server_id <= 0) {
        return ["success" => false, "message" => "Ungültige 'server_id'"];
    }

    // Das SQL-Statement vorbereiten
    $stmt = $mysqli->prepare("
        SELECT url 
        FROM ssi_trader.servers 
        WHERE server_id = ?
        LIMIT 1
    ");

    if (!$stmt) {
        // Fehler beim Vorbereiten des Statements
        return ["success" => false, "message" => "Fehler beim Vorbereiten des Statements: " . $mysqli->error];
    }

    // Parameter binden und die Abfrage ausführen
    $stmt->bind_param("i", $server_id);
    $stmt->execute();

    // Ergebnis abrufen
    $result = $stmt->get_result();


    if ($row = $result->fetch_assoc()) {

        return ["success" => true, "url" => $row["url"]];
    } else {
        // Kein Ergebnis gefunden
        return ["success" => false, "message" => "Keine IP-Adresse gefunden."];
    }

    // Ressourcen freigeben
    $stmt->close();
}


function getSingleServerIpByUserId($mysqli, $user_id)
{

    // Überprüfen, ob die übergebene user_id gültig ist
    if (!is_numeric($user_id) || $user_id <= 0) {
        return "Ungültige 'user_id'";
    }

    // Das SQL-Statement vorbereiten
    $stmt = $mysqli->prepare("
        SELECT s.url 
        FROM ssi_trader.setting st 
        JOIN ssi_trader.broker b ON st.broker_id = b.broker_id 
        JOIN ssi_trader.servers s ON b.server_id = s.server_id 
        WHERE st.user_id = ?
        LIMIT 1
    ");


    if (!$stmt) {
        // Fehler beim Vorbereiten des Statements
        return "Fehler beim Vorbereiten des Statements: " . $mysqli->error;
    }

    // Parameter binden und die Abfrage ausführen
    $stmt->bind_param("i", $user_id);
    $stmt->execute();

    // Ergebnis abrufen
    $result = $stmt->get_result();
    if ($row = $result->fetch_assoc()) {
        $url = $row["url"];
    } else {
        // Kein Ergebnis gefunden
        $url = "Keine IP-Adresse gefunden.";
    }

    // Ressourcen freigeben
    $stmt->close();

    // Die gefundene IP-Adresse oder Fehlermeldung zurückgeben
    return $url;
}


function fetchStocksData($cfg_mysql)
{
    // Verbindung zur Datenbank herstellen
    $connection = new mysqli($cfg_mysql['server'], $cfg_mysql['user'], $cfg_mysql['password'], $cfg_mysql['db']);
    if ($connection->connect_error) {
        return "Verbindung fehlgeschlagen: " . $connection->connect_error;
    }

    // SQL-Query vorbereiten
    $query = "SELECT * FROM ssi_trader.stocks_data ORDER BY time DESC LIMIT 200";
    $result = $connection->query($query);

    if ($result) {
        $smart_list = "<table class='ui very compact basic celled table'>";
        $smart_list .= "<thead><tr><th>Buy</th><th>Sell</th><th>Time</th><th>Price</th></tr></thead><tbody>";

        while ($row = $result->fetch_assoc()) {
            $smart_list .= "<tr><td" . ($row['buy'] > $row['sell'] ? " class='positive'" : "") . ">" . htmlspecialchars($row['buy']) . "</td><td" . ($row['sell'] > $row['buy'] ? " class='positive'" : "") . ">" . htmlspecialchars($row['sell']) . "</td><td>" . htmlspecialchars($row['time']) . "</td><td>" . htmlspecialchars($row['price']) . "</td></tr>";
        }

        $smart_list .= "</tbody></table>";
    } else {
        $smart_list = "Fehler beim Abrufen der Daten aus der Datenbank.";
    }

    $connection->close();
    return $smart_list;
}
