<?php
include('../config.inc.php');

// Processing the $_POST data
$expectedFields = [
	'update_id',
	'title',
	'text',
	'list_id',
	'form_id',
	'strategy_id',
	'server_id',
	'broker_server',
	'user',
	'password',
	'broker_id',
	'url',
	'name',
	'description',
	'clone', // bisherige Felder
	'first_name',
	'last_name',
	'email',
	'phone',
	'street',
	'zip',
	'country',
	'address',
	'company',
	// Neue Felder für "deposits"
	'amount', // Entspricht deposit_amount im Formular
	'deposit_date',
	// Neue Felder für "profit_shares"
	'profit_percentage', // Entspricht profit_share_percentage im Formular
	'start_date',
	'end_date',
	'paid_out',
	'comment',
	'client_id',
	'deposit_amount',
	'description',
	'profit_share_percentage',

];


$safePost = [];

foreach ($_POST as $key => $value) {
	if (in_array($key, $expectedFields) || preg_match('/^(lots|info|entrypoint|takeprofit)\d+$/', $key)) {
		// Processing known fields and dynamically generated lots/info fields
		$safePost[$key] = $GLOBALS['mysqli']->real_escape_string($value);
	}
}

if (isset($safePost['form_id'])) {

	switch ($safePost['form_id']) {
		case 'form_setting':
			// Prepared statement for replacing/updating in the strategy_group table
			$stmt = $GLOBALS['mysqli']->prepare("REPLACE INTO ssi_trader.setting SET setting_id = ?, title = ?, strategy_id = ?, broker_id = ?, user_id = ?");
			$stmt->bind_param("issii", $_SESSION['user_id'], $safePost['title'], $safePost['strategy_id'], $safePost['broker_id'], $_SESSION['user_id']);
			$stmt->execute();
			$setting_id = $stmt->insert_id;
			$stmt->close();
			echo "ok";
			break;
		case 'form_choose_strategy':

			// nur setting_id updaten
			$stmt = $GLOBALS['mysqli']->prepare("UPDATE ssi_trader.setting SET strategy_id = ?, broker_id = ? WHERE user_id = ?");
			// Angenommen, dass `$safePost['broker_id']` der korrekte Wert für broker_id ist
			$stmt->bind_param("iii", $safePost['strategy_id'], $safePost['broker_id'], $_SESSION['user_id']);
			$stmt->execute();

			// Überprüfen, wie viele Zeilen betroffen waren
			$affected_rows = $stmt->affected_rows;
			$stmt->close();

			if ($affected_rows > 0) {
				echo "ok";
			} else {
				echo "Fehler oder keine Zeilen aktualisiert.";
			}
			break;

		case 'form_home':
			if ($safePost['kill_all'])
				echo "ok";
			break;
	}
}


// Processing based on 'list_id'
if (isset($safePost['list_id'])) {
	switch ($safePost['list_id']) {

		case 'investment':

			// Prepared Statement zum Ersetzen/Einfügen in die deposits Tabelle
			$stmt = $GLOBALS['mysqli']->prepare("REPLACE INTO ssi_trader.deposits (deposit_id, client_id, amount, deposit_date, description) VALUES (?, ?, ?, ?, ?)");
			$stmt->bind_param("iisss", $safePost['update_id'], $safePost['client_id'], $safePost['deposit_amount'], $safePost['deposit_date'], $safePost['description']);
			$stmt->execute();
			$deposit_id = $stmt->insert_id; // Die ID des betroffenen Eintrags in 'deposits' erhalten
			$stmt->close();

			// Prepared Statement zum Ersetzen/Einfügen in die profit_shares Tabelle
			$stmt = $GLOBALS['mysqli']->prepare("REPLACE INTO ssi_trader.profit_shares (profit_share_id, client_id, profit_percentage, start_date, end_date, paid_out, comment) VALUES (?, ?, ?, ?, ?, ?, ?)");
			$stmt->bind_param("iisssis", $safePost['update_id'], $safePost['client_id'], $safePost['profit_share_percentage'], $safePost['start_date'], $safePost['end_date'], $safePost['paid_out'], $safePost['comment']);
			$stmt->execute();
			$profit_share_id = $stmt->insert_id; // Die ID des betroffenen Eintrags in 'profit_shares' erhalten
			$stmt->close();

			echo "ok";
			break;
		case 'client':

			$stmt = $GLOBALS['mysqli']->prepare("REPLACE INTO ssi_trader.clients (client_id, first_name, last_name, email, phone, street, zip, country, address, company, password, server_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
			$stmt->bind_param(
				"issssssssssi",
				$safePost['client_id'],
				$safePost['first_name'],
				$safePost['last_name'],
				$safePost['email'],
				$safePost['phone'],
				$safePost['street'],
				$safePost['zip'],
				$safePost['country'],
				$safePost['address'],
				$safePost['company'],
				$safePost['password'],
				$safePost['server_id']
			); // Stelle sicher, dass das Passwort sicher verschlüsselt ist

			// Ausführen des Statements
			$stmt->execute();

			// Die ID des betroffenen Client-Eintrags erhalten
			$client_id = $stmt->insert_id;

			// Schließen des Statements
			$stmt->close();

			echo "ok";
			break;


		case 'server':
			// Prepared Statement zum Ersetzen/Einfügen in die server Tabelle
			$stmt = $GLOBALS['mysqli']->prepare("REPLACE INTO ssi_trader.servers (server_id, url, name, description, user_id, strategy_id) VALUES (?, ?, ?, ?, ?, ?)");
			$stmt->bind_param("isssii", $safePost['update_id'], $safePost['url'], $safePost['name'], $safePost['description'], $_SESSION['user_id'], $safePost['strategy_id']);
			$stmt->execute();
			$server_id = $stmt->insert_id; // Die ID des betroffenen Server-Eintrags erhalten
			$stmt->close();
			echo "ok";
			break;

		case 'broker':

			// Prepared statement for replacing/updating in the accounts table
			$stmt = $GLOBALS['mysqli']->prepare("REPLACE INTO ssi_trader.broker SET broker_id = ?, broker_server = ?, user = ?, password = ?, server_id = ?, user_id = ?");
			$stmt->bind_param("isssii", $safePost['update_id'], $safePost['broker_server'], $safePost['user'], $safePost['password'], $safePost['server_id'], $_SESSION['user_id']);
			$stmt->execute();
			$account_id = $stmt->insert_id;
			$stmt->close();
			echo "ok";
			break;

		case 'hedging':

			if ($safePost['clone'])
				$safePost['update_id'] = '';

			// Prepared statement for replacing/updating in the strategy_group table
			$stmt = $GLOBALS['mysqli']->prepare("REPLACE INTO ssi_trader.hedging_group SET group_id = ?, title = ?, text = ?");
			$stmt->bind_param("iss", $safePost['update_id'], $safePost['title'], $safePost['text']);
			$stmt->execute();
			$group_id = $stmt->insert_id;
			$stmt->close();

			// Deleting existing hedgings for the group
			$deleteStmt = $GLOBALS['mysqli']->prepare("DELETE FROM ssi_trader.hedging WHERE group_id = ?");
			$deleteStmt->bind_param("i", $group_id);
			$deleteStmt->execute();
			$deleteStmt->close();

			for ($i = 1; $i < 14; $i++) {
				$lotsVarName = "lots" . $i;
				$infoVarName = "info" . $i;
				$entrypointVarName = "entrypoint" . $i;
				$takeprofitVarName = "takeprofit" . $i;

				// Zugriff auf die Werte von lots und info aus $safePost
				$lotsValue = isset($safePost[$lotsVarName]) ? floatval(str_replace(',', '.', $safePost[$lotsVarName])) : null;
				$entrypointValue = isset($safePost[$entrypointVarName]) ? floatval(str_replace(',', '.', $safePost[$entrypointVarName])) : null;
				$takeprofitValue = isset($safePost[$takeprofitVarName]) ? floatval(str_replace(',', '.', $safePost[$takeprofitVarName])) : null;
				$infoValue = isset($safePost[$infoVarName]) ? $safePost[$infoVarName] : '';

				if (is_numeric($lotsValue) && is_numeric($entrypointValue) && is_numeric($takeprofitValue)) {
					// Vorbereitete Anweisung zum Einfügen in die Hedging-Tabelle
					$insertStmt = $GLOBALS['mysqli']->prepare("INSERT INTO ssi_trader.hedging SET group_id = ?, level = ?, lots = ?, entrypoint = ?, takeprofit = ?, info = ?");
					$insertStmt->bind_param("iiddss", $group_id, $i, $lotsValue, $entrypointValue, $takeprofitValue, $infoValue);
					$insertStmt->execute();
					$insertStmt->close();
				} else {
					echo "Ungültige Eingabe bei Level $i";
					exit;
				}
			}

			echo "ok";
			break;
	}
}
